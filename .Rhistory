"tot_rel_scup_new",  "tot_scup_catch",    "tot_bsb_catch",     "tot_sf_catch")
mean_trip_data <- mean_trip_data %>%
as.data.table() %>%
.[,as.vector(list_names) := lapply(.SD, function(x) x * probA), .SDcols = list_names] %>%
.[]
dtrips<-feather::read_feather(file.path(input_data_cd, paste0("directed_trips_calibration_", s, ".feather"))) %>%
tibble::tibble() %>%
dplyr::filter(draw == i) %>%
dplyr::select(mode, date, dtrip) %>%
dplyr::filter(mode==md)
mean_trip_data<-mean_trip_data %>%
left_join(dtrips, by = c("mode", "date"))
mean_trip_data <-mean_trip_data %>%
group_by(mode, date) %>%
dplyr::mutate(mean_prob=mean(probA)) %>%
dplyr::ungroup() %>%
dplyr::mutate(sims=round(dtrip/mean_prob),
expand=sims/n_draws,
n_choice_occasions=1)
mean_trip_data <- mean_trip_data %>%
mutate(uniform=runif(n(), min=0, max=1)) %>%
dplyr::arrange(date, mode, uniform)
mean_trip_data1 <- mean_trip_data %>%
dplyr::group_by(date, mode) %>%
dplyr::mutate(id_within_group = row_number()) %>%
dplyr::filter(expand<1 & id_within_group<=sims)
mean_trip_data2 <- mean_trip_data %>%
dplyr::filter(expand>1)  %>%
dplyr::mutate(expand2=ceiling(expand))
row_inds <- seq_len(nrow(mean_trip_data2))
mean_trip_data2<-mean_trip_data2 %>%
slice(rep(row_inds,expand2))
mean_trip_data2 <- mean_trip_data2 %>%
dplyr::group_by(date, mode) %>%
dplyr::mutate(id_within_group = row_number()) %>%
dplyr::filter(id_within_group<=sims) %>%
dplyr::ungroup()
results<-mean_trip_data1 %>%
dplyr::bind_rows(mean_trip_data2)
list_names = c("tot_bsb_catch","tot_keep_bsb_new","tot_keep_scup_new","tot_keep_sf_new","tot_rel_bsb_new",
"tot_rel_scup_new","tot_rel_sf_new","tot_scup_catch","tot_sf_catch",
"probA","n_choice_occasions")
aggregate_trip_data <- results %>%
data.table::as.data.table() %>%
.[,lapply(.SD, sum),  by = c("date", "mode"), .SDcols = list_names]
aggregate_trip_data<-aggregate_trip_data %>%
dplyr::rename(estimated_trips=probA,
sf_catch=tot_sf_catch,
bsb_catch=tot_bsb_catch,
scup_catch=tot_scup_catch,
sf_keep=tot_keep_sf_new,
bsb_keep=tot_keep_bsb_new,
scup_keep=tot_keep_scup_new,
sf_rel=tot_rel_sf_new,
bsb_rel=tot_rel_bsb_new,
scup_rel=tot_rel_scup_new)
#saveRDS(aggregate_trip_data, file = paste0(output_data_cd, "calibration_data_", s,"_", i, ".rds"))
list_names = c("bsb_catch","bsb_keep","bsb_rel",
"scup_catch", "scup_keep","scup_rel",
"sf_catch", "sf_keep","sf_rel",
"estimated_trips","n_choice_occasions")
summed_results <- aggregate_trip_data %>%
data.table::as.data.table() %>%
.[,lapply(.SD, sum),  by = c("mode"), .SDcols = list_names]
aggregate_trip_data<-aggregate_trip_data %>%
dplyr::select(date, mode, n_choice_occasions, estimated_trips)
write_feather(aggregate_trip_data, file.path(iterative_input_data_cd, paste0("n_choice_occasions_", s,"_", md, "_", i, ".feather")))
########
#Compare calibration output to MRIP by state-mode
#Save simulation results by mode as objects
# Loop over rows (modes)
for (r in 1:nrow(summed_results)) {
mode_val <- summed_results$mode[r]
# Loop over summary columns
for (var in names(summed_results)[names(summed_results) != "mode"]) {
value <- summed_results[[var]][r]
obj_name <- paste0(var, "_", "model")
assign(obj_name, value)
}
}
#Save MRIP estimates  by mode as objects
MRIP_comparison_draw <- MRIP_comparison %>%
dplyr::filter(draw==i & state==s)%>%
dplyr::filter(mode==md)
mode_val <- MRIP_comparison_draw$mode
# Loop over summary columns
for (var in names(MRIP_comparison_draw)[names(MRIP_comparison_draw) != "mode"]) {
value <- MRIP_comparison_draw[[var]]
obj_name <- paste0(var, "_", "MRIP")
assign(obj_name, value)
}
species <- c("sf", "bsb", "scup")
dispositions <- c("keep", "rel", "catch")
compare1 <- data.frame()
# Initialize a vector to track intermediate variable names
intermediate_vars <- c()
for (sp in species) {
for (disp in dispositions) {
# Construct variable names
base_name <- paste(sp, disp, sep = "_")
mrip_var <- paste0(base_name, "_MRIP")
model_var <- paste0(base_name, "_model")
# Check if both variables exist
if (exists(mrip_var) && exists(model_var)) {
# Retrieve values
mrip_val <- get(mrip_var)
model_val <- get(model_var)
# Calculate differences
diff_val <- model_val - mrip_val
pct_diff_val <- if (mrip_val != 0)  (diff_val / mrip_val) * 100 else NA
abs_diff_val <- abs(model_val - mrip_val)
abs_pct_diff_val <- if (mrip_val != 0)  abs((diff_val / mrip_val) * 100) else NA
# Create variable names and assign them
diff_name <- paste0(base_name, "_diff")
pct_diff_name <- paste0(base_name, "_pct_diff")
abs_diff_name <- paste0(base_name, "_abs_diff")
abs_pct_diff_name <- paste0(base_name, "_abs_pct_diff")
assign(diff_name, diff_val)
assign(pct_diff_name, pct_diff_val)
assign(abs_diff_name, abs_diff_val)
assign(abs_pct_diff_name, abs_pct_diff_val)
# Store names to delete later
intermediate_vars <- c(intermediate_vars,
diff_name, pct_diff_name,
abs_diff_name, abs_pct_diff_name)
compare1 <- rbind(compare1, data.frame(
species = sp,
disposition = disp,
mode = md,
MRIP = mrip_val,
model = model_val,
diff = diff_val,
pct_diff = pct_diff_val,
abs_diff_val= abs_diff_val,
abs_pct_diff_val= abs_pct_diff_val
))
}
else {
warning(paste("Missing variable:", mrip_var, "or", model_var))
}
}
}
# Remove all intermediate variables created with assign()
rm(list = intermediate_vars)
rm(sf_keep_model, sf_keep_MRIP, sf_catch_model, sf_catch_MRIP, sf_rel_model, sf_rel_MRIP,
bsb_keep_model, bsb_keep_MRIP, bsb_catch_model, bsb_catch_MRIP, bsb_rel_model, bsb_rel_MRIP,
scup_keep_model, scup_keep_MRIP, scup_catch_model, scup_catch_MRIP, scup_rel_model, scup_rel_MRIP)
compare1_k<-compare1 %>%
dplyr::filter(disposition=="keep") %>%
dplyr::select(mode, species, MRIP, model, diff, pct_diff) %>%
dplyr::rename(MRIP_keep=MRIP, model_keep=model, diff_keep=diff, pct_diff_keep=pct_diff)
compare1_r<-compare1 %>%
dplyr::filter(disposition=="rel") %>%
dplyr::select(mode, species, MRIP, model, diff, pct_diff) %>%
dplyr::rename(MRIP_rel=MRIP, model_rel=model, diff_rel=diff, pct_diff_rel=pct_diff) %>%
dplyr::left_join(compare1_k, by=c("mode", "species"))
compare1_c<-compare1 %>%
dplyr::filter(disposition=="catch") %>%
dplyr::select(mode, species, MRIP, model, diff, pct_diff) %>%
dplyr::rename(MRIP_catch=MRIP, model_catch=model, diff_catch=diff, pct_diff_catch=pct_diff) %>%
dplyr::left_join(compare1_r, by=c("mode", "species"))
calib_comparison1<-compare1_c %>%
dplyr::mutate(draw=i, state=s)
# Vector of object names you want to remove
objects_to_remove <- c("angler_dems", "baseline_outcomes", "baseline_output0",
"bsb_catch_data", "bsb_trip_data", "bsb_zero_catch",
"sf_catch_data", "sf_trip_data", "sf_zero_catch",
"scup_catch_data", "scup_trip_data", "scup_zero_catch",
"catch_data", "trip_data", "parameters", "mean_trip_data",
"mean_trip_data1", "mean_trip_data2")
# Only remove those that exist
rm(list = objects_to_remove[objects_to_remove %in% ls()], envir = .GlobalEnv)
for (p in 1:nrow(calib_comparison1)) {
sp <- calib_comparison1$species[p]
assign(paste0("MRIP_keep_", sp), calib_comparison1$MRIP_keep[p])
assign(paste0("model_keep_", sp), calib_comparison1$model_keep[p])
assign(paste0("harv_diff_", sp), calib_comparison1$diff_keep[p])
assign(paste0("harv_pct_diff_", sp), calib_comparison1$pct_diff_keep[p])
}
all_keep_to_rel_sf<-case_when(p_keep_to_rel_sf==1~1, TRUE~0)
all_keep_to_rel_bsb<-case_when(p_keep_to_rel_bsb==1~1, TRUE~0)
all_keep_to_rel_scup<-case_when(p_keep_to_rel_scup==1~1, TRUE~0)
message("run ", i, " state ", s, " mode ", md)
message("model_sf_harv: ", model_keep_sf)
message("mrip_sf_harv: ", MRIP_keep_sf)
message("diff_sf_harv: ", harv_diff_sf)
message("pct_diff_sf_harv: ", harv_pct_diff_sf)
message("rel_to_keep_sf: ", rel_to_keep_sf)
message("p_rel_to_keep_sf: ", p_rel_to_keep_sf)
message("p_keep_to_rel_sf: ", p_keep_to_rel_sf)
message("model_bsb_harv: ", model_keep_bsb)
message("mrip_bsb_harv: ", MRIP_keep_bsb)
message("diff_bsb_harv: ", harv_diff_bsb)
message("pct_diff_bsb_harv: ", harv_pct_diff_bsb)
message("rel_to_keep_bsb: ", rel_to_keep_bsb)
message("p_rel_to_keep_bsb: ", p_rel_to_keep_bsb)
message("p_keep_to_rel_bsb: ", p_keep_to_rel_bsb)
message("model_scup_harv: ", model_keep_scup)
message("mrip_scup_harv: ", MRIP_keep_scup)
message("diff_scup_harv: ", harv_diff_scup)
message("pct_diff_scup_harv: ", harv_pct_diff_scup)
message("rel_to_keep_scup: ", rel_to_keep_scup)
message("p_rel_to_keep_scup: ", p_rel_to_keep_scup)
message("p_keep_to_rel_scup: ", p_keep_to_rel_scup)
sf_achieved<-case_when((abs(harv_diff_sf)<500 | abs(harv_pct_diff_sf)<5 | base_sf_achieved==1) ~1, TRUE~0)
bsb_achieved<-case_when((abs(harv_diff_bsb)<500 | abs(harv_pct_diff_bsb)<5 | base_bsb_achieved==1) ~1, TRUE~0)
scup_achieved<-case_when((abs(harv_diff_scup)<500 | abs(harv_pct_diff_scup)<5 | base_scup_achieved==1) ~1, TRUE~0)
calibrated<- calib_comparison1 %>%
dplyr::mutate(# model_keep_sf=model_keep_sf,
# MRIP_keep_sf=MRIP_keep_sf,
# harv_diff_sf=  harv_diff_sf,
# harv_pct_diff_sf = harv_pct_diff_sf,
keep_to_rel_sf=keep_to_rel_sf,
rel_to_keep_sf=  rel_to_keep_sf,
p_rel_to_keep_sf=p_rel_to_keep_sf,
p_keep_to_rel_sf= p_keep_to_rel_sf,
# model_keep_bsb=  model_keep_bsb,
# MRIP_keep_bsb= MRIP_keep_bsb,
# harv_diff_bsb=  harv_diff_bsb,
# harv_pct_diff_bsb= harv_pct_diff_bsb,
keep_to_rel_bsb=keep_to_rel_bsb,
rel_to_keep_bsb=  rel_to_keep_bsb,
p_rel_to_keep_bsb= p_rel_to_keep_bsb,
p_keep_to_rel_bsb= p_keep_to_rel_bsb,
# model_keep_scup=  model_keep_scup,
# MRIP_keep_scup=MRIP_keep_scup,
# harv_diff_scup= harv_diff_scup,
# harv_pct_diff_scup =harv_pct_diff_scup ,
keep_to_rel_scup=keep_to_rel_scup,
rel_to_keep_scup =rel_to_keep_scup,
p_rel_to_keep_scup=p_rel_to_keep_scup,
p_keep_to_rel_scup=p_keep_to_rel_scup,
n_sub_scup_kept=n_sub_scup_kept,
prop_sub_scup_kept=prop_sub_scup_kept,
n_legal_scup_rel=n_legal_scup_rel,
prop_legal_scup_rel=prop_legal_scup_rel,
n_sub_sf_kept=n_sub_sf_kept,
n_legal_sf_rel=n_legal_sf_rel,
prop_sub_sf_kept=prop_sub_sf_kept,
prop_legal_sf_rel=prop_legal_sf_rel,
n_sub_bsb_kept=n_sub_bsb_kept,
n_legal_bsb_rel=n_legal_bsb_rel,
prop_sub_bsb_kept=prop_sub_bsb_kept,
prop_legal_bsb_rel=prop_legal_bsb_rel)
View(calibrated)
input_data_cd=here("Data")
test_data_cd=here("Data", "Test_data")
code_cd=here("Code", "sim")
#output_data_cd=here("lou_files","cod_haddock","output_data")
iterative_input_data_cd="C:/Users/andrew.carr-harris/Desktop/flukeRDM_iterative_data"
input_data_cd="C:/Users/andrew.carr-harris/Desktop/MRIP_data_2025"
#Set number of original draws. We use 150 for the final run. Choose a lot fewer for test runs
n_simulations<-100
n_draws<-50 #Number of simulated trips per day
MRIP_comparison = read_dta(file.path(iterative_input_data_cd,"simulated_catch_totals.dta")) %>%
dplyr::rename(estimated_trips=tot_dtrip_sim,
sf_catch=tot_sf_cat_sim,
bsb_catch=tot_bsb_cat_sim,
scup_catch=tot_scup_cat_sim,
sf_keep=tot_sf_keep_sim,
bsb_keep=tot_bsb_keep_sim,
scup_keep=tot_scup_keep_sim,
sf_rel=tot_sf_rel_sim,
bsb_rel=tot_bsb_rel_sim,
scup_rel=tot_scup_rel_sim)
baseline_output0<-feather::read_feather(file.path(iterative_input_data_cd, "calibration_comparison.feather"))
states <- c("MA", "RI")
mode_draw <- c("sh", "pr")
draws <- 1:2
# i<-1
# s<-"MA"
# md<-"pr"
#
# Create an empty list to collect results
calibrated <- list()
# Counter for appending to list
k <- 1
# Loop over all combinations
for (s in states){
for (md in mode_draw){
for (i in draws) {
calib_comparison<-feather::read_feather(file.path(iterative_input_data_cd, "calibration_comparison.feather")) %>%
dplyr::filter(state==s & draw==i & mode==md)
for (p in 1:nrow(calib_comparison)) {
sp <- calib_comparison$species[p]
assign(paste0("rel_to_keep_", sp), calib_comparison$rel_to_keep[p])
assign(paste0("keep_to_rel_", sp), calib_comparison$keep_to_rel[p])
assign(paste0("harv_diff_", sp), calib_comparison$diff[p])
assign(paste0("harv_pct_diff_", sp), calib_comparison$pct_diff[p])
if (calib_comparison$rel_to_keep[p] == 1) {
assign(paste0("p_rel_to_keep_", sp), calib_comparison$p_rel_to_keep[p])
assign(paste0("p_keep_to_rel_", sp), 0)
}
if (calib_comparison$keep_to_rel[p] == 1) {
assign(paste0("p_keep_to_rel_", sp), calib_comparison$p_keep_to_rel[p])
assign(paste0("p_rel_to_keep_", sp), 0)
}
}
base_sf_achieved<-case_when((abs(harv_diff_sf)<500 | abs(harv_pct_diff_sf)<5)~1, TRUE~0)
base_bsb_achieved<-case_when((abs(harv_diff_bsb)<500 | abs(harv_pct_diff_bsb)<5)~1, TRUE~0)
base_scup_achieved<-case_when((abs(harv_diff_scup)<500 | abs(harv_pct_diff_scup)<5)~1, TRUE~0)
sf_achieved<-case_when(base_sf_achieved==1~1, TRUE~0)
bsb_achieved<-case_when(base_bsb_achieved==1~1, TRUE~0)
scup_achieved<-case_when(base_scup_achieved==1~1, TRUE~0)
if(base_sf_achieved==1  & base_bsb_achieved==1 & base_scup_achieved==1) break
if(base_sf_achieved!=1  | base_bsb_achieved!=1 | base_scup_achieved!=1) {
source(file.path(code_cd, "calibrate_rec_catch1.R"))
for (p in 1:nrow(calib_comparison1)) {
sp <- calib_comparison1$species[p]
assign(paste0("MRIP_keep_", sp), calib_comparison1$MRIP_keep[p])
assign(paste0("model_keep_", sp), calib_comparison1$model_keep[p])
assign(paste0("harv_diff_", sp), calib_comparison1$diff_keep[p])
assign(paste0("harv_pct_diff_", sp), calib_comparison1$pct_diff_keep[p])
}
all_keep_to_rel_sf<-case_when(p_keep_to_rel_sf==1~1, TRUE~0)
all_keep_to_rel_bsb<-case_when(p_keep_to_rel_bsb==1~1, TRUE~0)
all_keep_to_rel_scup<-case_when(p_keep_to_rel_scup==1~1, TRUE~0)
message("run ", i, " state ", s, " mode ", md)
message("model_sf_harv: ", model_keep_sf)
message("mrip_sf_harv: ", MRIP_keep_sf)
message("diff_sf_harv: ", harv_diff_sf)
message("pct_diff_sf_harv: ", harv_pct_diff_sf)
message("rel_to_keep_sf: ", rel_to_keep_sf)
message("p_rel_to_keep_sf: ", p_rel_to_keep_sf)
message("p_keep_to_rel_sf: ", p_keep_to_rel_sf)
message("model_bsb_harv: ", model_keep_bsb)
message("mrip_bsb_harv: ", MRIP_keep_bsb)
message("diff_bsb_harv: ", harv_diff_bsb)
message("pct_diff_bsb_harv: ", harv_pct_diff_bsb)
message("rel_to_keep_bsb: ", rel_to_keep_bsb)
message("p_rel_to_keep_bsb: ", p_rel_to_keep_bsb)
message("p_keep_to_rel_bsb: ", p_keep_to_rel_bsb)
message("model_scup_harv: ", model_keep_scup)
message("mrip_scup_harv: ", MRIP_keep_scup)
message("diff_scup_harv: ", harv_diff_scup)
message("pct_diff_scup_harv: ", harv_pct_diff_scup)
message("rel_to_keep_scup: ", rel_to_keep_scup)
message("p_rel_to_keep_scup: ", p_rel_to_keep_scup)
message("p_keep_to_rel_scup: ", p_keep_to_rel_scup)
sf_achieved<-case_when((abs(harv_diff_sf)<500 | abs(harv_pct_diff_sf)<5 | base_sf_achieved==1) ~1, TRUE~0)
bsb_achieved<-case_when((abs(harv_diff_bsb)<500 | abs(harv_pct_diff_bsb)<5 | base_bsb_achieved==1) ~1, TRUE~0)
scup_achieved<-case_when((abs(harv_diff_scup)<500 | abs(harv_pct_diff_scup)<5 | base_scup_achieved==1) ~1, TRUE~0)
if(sf_achieved==1  & bsb_achieved==1 & scup_achieved==1) break
repeat{
#For draws where release_to_keep==1:
#If baseline sf harvest is less than MRIP, but in a new run sf harvest is greater than MRIP,
#reduce the baseline p_rel_to_keep value
if(sf_achieved!=1){
if(rel_to_keep_sf==1){
if(harv_diff_sf>0){
p_rel_to_keep_sf<-p_rel_to_keep_sf - p_rel_to_keep_sf*.15
}
#If baseline sf harvest is less than MRIP, and in the new run sf harvest is still less than MRIP,
#increase the baseline p_rel_to_keep value
if(harv_diff_sf<0) {
p_rel_to_keep_sf<-p_rel_to_keep_sf + p_rel_to_keep_sf*.16
}
}
#For draws where keep_to_release==1
#If in the baseline run, harvest is less than MRIP, but in a new run harvest is greater than MRIP,
#reduce the baseline p_keep_to_rel value
if(keep_to_rel_sf==1 & all_keep_to_rel_sf!=1) {
if(harv_diff_sf>0){
p_keep_to_rel_sf<-p_keep_to_rel_sf + p_keep_to_rel_sf*.16
}
#If in the baseline run, harvest is less than MRIP, and in the new run harvest is still less than MRIP,
#increase the baseline p_keep_to_rel value
if(harv_diff_sf<0){
p_keep_to_rel_sf<-p_keep_to_rel_sf - p_keep_to_rel_sf*.15
}
}
}
#BSB
#For draws where release_to_keep==1:
#If baseline sf harvest is less than MRIP, but in a new run sf harvest is greater than MRIP,
#reduce the baseline p_rel_to_keep value
if(bsb_achieved!=1){
if(rel_to_keep_bsb==1){
if(harv_diff_bsb>0){
p_rel_to_keep_bsb<-p_rel_to_keep_bsb - p_rel_to_keep_bsb*.15
}
#If baseline bsb harvest is less than MRIP, and in the new run bsb harvest is still less than MRIP,
#increase the baseline p_rel_to_keep value
if(harv_diff_bsb<0) {
p_rel_to_keep_bsb<-p_rel_to_keep_bsb + p_rel_to_keep_bsb*.16
}
}
#For draws where keep_to_release==1
#If in the baseline run, harvest is less than MRIP, but in a new run harvest is greater than MRIP,
#reduce the baseline p_keep_to_rel value
if(keep_to_rel_bsb==1 & all_keep_to_rel_bsb!=1) {
if(harv_diff_bsb>0){
p_keep_to_rel_bsb<-p_keep_to_rel_bsb + p_keep_to_rel_bsb*.16
}
#If in the baseline run, harvest is less than MRIP, and in the new run harvest is still less than MRIP,
#increase the baseline p_keep_to_rel value
if(harv_diff_bsb<0){
p_keep_to_rel_bsb<-p_keep_to_rel_bsb - p_keep_to_rel_bsb*.15
}
}
}
#Scup
#For draws where release_to_keep==1:
#If baseline sf harvest is less than MRIP, but in a new run sf harvest is greater than MRIP,
#reduce the baseline p_rel_to_keep value
if(scup_achieved!=1){
if(rel_to_keep_scup==1){
if(harv_diff_scup>0){
p_rel_to_keep_scup<-p_rel_to_keep_scup - p_rel_to_keep_scup*.15
}
#If baseline scup harvest is less than MRIP, and in the new run scup harvest is still less than MRIP,
#increase the baseline p_rel_to_keep value
if(harv_diff_scup<0) {
p_rel_to_keep_scup<-p_rel_to_keep_scup + p_rel_to_keep_scup*.16
}
}
#For draws where keep_to_release==1
#If in the baseline run, harvest is less than MRIP, but in a new run harvest is greater than MRIP,
#reduce the baseline p_keep_to_rel value
if(keep_to_rel_scup==1 & all_keep_to_rel_scup!=1) {
if(harv_diff_scup>0){
p_keep_to_rel_scup<-p_keep_to_rel_scup + p_keep_to_rel_scup*.16
}
#If in the baseline run, harvest is less than MRIP, and in the new run harvest is still less than MRIP,
#increase the baseline p_keep_to_rel value
if(harv_diff_scup<0){
p_keep_to_rel_scup<-p_keep_to_rel_scup - p_keep_to_rel_scup*.15
}
}
}
if(all_keep_to_rel_sf==1 & sf_achieved!=1) {
p_keep_to_rel_sf<-1
}
if(all_keep_to_rel_bsb==1 & bsb_achieved!=1) {
p_keep_to_rel_bsb<-1
}
if(all_keep_to_rel_scup==1 & scup_achieved!=1) {
p_keep_to_rel_scup<-1
}
rm(calib_comparison1)
source(file.path(code_cd, "calibrate_rec_catch1.R"))
for (p in 1:nrow(calib_comparison1)) {
sp <- calib_comparison1$species[p]
assign(paste0("MRIP_keep_", sp), calib_comparison1$MRIP_keep[p])
assign(paste0("model_keep_", sp), calib_comparison1$model_keep[p])
assign(paste0("harv_diff_", sp), calib_comparison1$diff_keep[p])
assign(paste0("harv_pct_diff_", sp), calib_comparison1$pct_diff_keep[p])
}
message("run ", i, " state ", s, " mode ", md)
message("model_sf_harv: ", model_keep_sf)
message("mrip_sf_harv: ", MRIP_keep_sf)
message("diff_sf_harv: ", harv_diff_sf)
message("pct_diff_sf_harv: ", harv_pct_diff_sf)
message("rel_to_keep_sf: ", rel_to_keep_sf)
message("p_rel_to_keep_sf: ", p_rel_to_keep_sf)
message("p_keep_to_rel_sf: ", p_keep_to_rel_sf)
message("model_bsb_harv: ", model_keep_bsb)
message("mrip_bsb_harv: ", MRIP_keep_bsb)
message("diff_bsb_harv: ", harv_diff_bsb)
message("pct_diff_bsb_harv: ", harv_pct_diff_bsb)
message("rel_to_keep_bsb: ", rel_to_keep_bsb)
message("p_rel_to_keep_bsb: ", p_rel_to_keep_bsb)
message("p_keep_to_rel_bsb: ", p_keep_to_rel_bsb)
message("model_scup_harv: ", model_keep_scup)
message("mrip_scup_harv: ", MRIP_keep_scup)
message("diff_scup_harv: ", harv_diff_scup)
message("pct_diff_scup_harv: ", harv_pct_diff_scup)
message("rel_to_keep_scup: ", rel_to_keep_scup)
message("p_rel_to_keep_scup: ", p_rel_to_keep_scup)
message("p_keep_to_rel_scup: ", p_keep_to_rel_scup)
sf_achieved<-case_when((abs(harv_diff_sf)<500 | abs(harv_pct_diff_sf)<5)~1, TRUE~0)
bsb_achieved<-case_when((abs(harv_diff_bsb)<500 | abs(harv_pct_diff_bsb)<5)~1, TRUE~0)
scup_achieved<-case_when((abs(harv_diff_scup)<500 | abs(harv_pct_diff_scup)<5)~1, TRUE~0)
if (sf_achieved==1 & bsb_achieved==1 & scup_achieved==1) break
}
calibrated[[k]] <- calib_comparison1 %>%
dplyr::mutate(keep_to_rel_sf=keep_to_rel_sf,
rel_to_keep_sf=  rel_to_keep_sf,
p_rel_to_keep_sf=p_rel_to_keep_sf,
p_keep_to_rel_sf= p_keep_to_rel_sf,
keep_to_rel_bsb=keep_to_rel_bsb,
rel_to_keep_bsb=  rel_to_keep_bsb,
p_rel_to_keep_bsb= p_rel_to_keep_bsb,
p_keep_to_rel_bsb= p_keep_to_rel_bsb,
keep_to_rel_scup=keep_to_rel_scup,
rel_to_keep_scup =rel_to_keep_scup,
p_rel_to_keep_scup=p_rel_to_keep_scup,
p_keep_to_rel_scup=p_keep_to_rel_scup,
n_sub_scup_kept=n_sub_scup_kept,
prop_sub_scup_kept=prop_sub_scup_kept,
n_legal_scup_rel=n_legal_scup_rel,
prop_legal_scup_rel=prop_legal_scup_rel,
n_sub_sf_kept=n_sub_sf_kept,
n_legal_sf_rel=n_legal_sf_rel,
prop_sub_sf_kept=prop_sub_sf_kept,
prop_legal_sf_rel=prop_legal_sf_rel,
n_sub_bsb_kept=n_sub_bsb_kept,
n_legal_bsb_rel=n_legal_bsb_rel,
prop_sub_bsb_kept=prop_sub_bsb_kept,
prop_legal_bsb_rel=prop_legal_bsb_rel)
}
k <- k + 1
}
}
}
calibrated_combined <- do.call(rbind, calibrated)
View(calibrated_combined)
base_outcomes0[[md]]<-feather::read_feather(file.path(test_data_cd, paste0("base_outcomes_MA_", md, "_", dr, ".feather"))) %>%
data.table::as.data.table()
base_outcomes<-feather::read_feather(file.path(iterative_input_data_cd, "base_outcomes_MA_pr_1.feather")))
base_outcomes<-feather::read_feather(file.path(iterative_input_data_cd, "base_outcomes_MA_pr_1.feather"))
View(base_outcomes)
